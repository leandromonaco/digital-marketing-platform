@page "/{pagename?}"


@using DigitalMarketing.Website.Components
@using DigitalMarketing.Core.Database
@using DigitalMarketing.Model.Settings
@using DigitalMarketing.Website.Model
@using Microsoft.AspNetCore.Http
@using  DigitalMarketing.Model
@using  DigitalMarketing.Model.Extensions
@using DigitalMarketing.Model.Helpers
@using DigitalMarketing.Core.Http
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@inject IJSRuntime JSRuntime

<div class="nav-container">
    <NavigationBar></NavigationBar>
</div>


@if (_tenant != null && _configuration != null)
{
    @*<Title Value="@_configuration.Title"></Title>*@

    if (string.IsNullOrEmpty(PageName) ||
       (!string.IsNullOrEmpty(PageName) && PageName.Equals("undefined")))
    {
        PageName = "home";
    }
    var p = _configuration.Pages.Where(p => p.Name.Equals(PageName)).FirstOrDefault();

    foreach (var s in p.Sections)
    {
        switch (s.Type)
        {
            case "Alert":
                <Alert Tenant="@_tenant" Section="@s"></Alert>
                break;
            case "Cover":
                <Cover Tenant="@_tenant" Section="@s"></Cover>
                break;
            case "CallToAction":
                <CallToAction Tenant="@_tenant" Section="@s"></CallToAction>
                break;
            case "Carrousel":
                <Carrousel Tenant="@_tenant" Section="@s"></Carrousel>
                break;
            case "Gallery":
                <Gallery Tenant="@_tenant" Section="@s"></Gallery>
                break;
            case "Countdown":
                <Countdown Tenant="@_tenant" Section="@s"></Countdown>
                break;
            case "ContactForm":
                <ContactForm Tenant="@_tenant" Section="@s"></ContactForm>
                break;
            case "Tabs":
                <Tabs Tenant="@_tenant" Section="@s"></Tabs>
                break;
            case "Map":
                <Map Tenant="@_tenant" Section="@s"></Map>
                break;
            case "ContentImage":
                <ContentImage Tenant="@_tenant" Section="@s"></ContentImage>
                break;
            case "ContentVideo":
                <ContentVideo Tenant="@_tenant" Section="@s"></ContentVideo>
                break;
            case "Testimonials":
                <Testimonials Tenant="@_tenant" Section="@s"></Testimonials>
                break;
            case "PricingPlans":
                <PricingPlans Tenant="@_tenant" Section="@s"></PricingPlans>
                break;
            case "Accordion":
                <Accordion Tenant="@_tenant" Section="@s"></Accordion>
                break;
            case "Footer":
                <Footer Tenant="@_tenant" Section="@s"></Footer>
                break;
        }
    }
}

@code
{
    [Parameter]
    public string PageName { get; set; }

    //[Inject]
    //public IHttpService HttpService { get; set; }

    [Inject]
    public IHttpContextAccessor HttpContextAccessor { get; set; }

    Tenant _tenant;
    TenantConfigurationModel _configuration;
    List<ColorVariable> _colorVariables;

    /// <summary>
    /// https://docs.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-5.0
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        //var test = await HttpService.GetAsync("http://localhost:52090");
        _tenant = await SiteHelper.IdentifyTenant(HttpContextAccessor.HttpContext.Request.Host.Value);
        _configuration = _tenant.LoadConfiguration(HttpContextAccessor.HttpContext.Request.Host.Value);

        var themes = new List<string>() { "bg-primary",
                                          "bg-secondary",
                                          "bg-light",
                                          "bg-dark",
                                          "bg-primary-button",
                                          "bg-secondary-button",
                                          "bg-light-button",
                                          "bg-dark-button"};

        _colorVariables = new List<ColorVariable>();

        foreach (var theme in themes)
        {
            _colorVariables.Add(new ColorVariable() { Name = $"--{theme}-background", Value = GetColor($"--{theme}-background") });
            _colorVariables.Add(new ColorVariable() { Name = $"--{theme}-color", Value = GetColor($"--{theme}-color") });
            _colorVariables.Add(new ColorVariable() { Name = $"--{theme}-border-color", Value = GetColor($"--{theme}-border-color") });
        }
    }

    protected string GetColor(string theme)
    {
        switch (theme)
        {
            case "--bg-primary-background":
            case "--bg-secondary-color":
            case "--bg-secondary-border-color":

            case "--bg-secondary-button-background":
            case "--bg-primary-button-color":
            case "--bg-primary-button-border-color":

                return _configuration.Colors.Primary;

            case "--bg-secondary-background":
            case "--bg-primary-color":
            case "--bg-primary-border-color":

            case "--bg-primary-button-background":
            case "--bg-secondary-button-color":
            case "--bg-secondary-button-border-color":

                return _configuration.Colors.Secondary;

            case "--bg-light-background":
            case "--bg-dark-color":
            case "--bg-dark-border-color":

            case "--bg-dark-button-background":
            case "--bg-light-button-color":
            case "--bg-light-button-border-color":

                return _configuration.Colors.Light;

            case "--bg-dark-background":
            case "--bg-light-color":
            case "--bg-light-border-color":

            case "--bg-light-button-background":
            case "--bg-dark-button-color":
            case "--bg-dark-button-border-color":

                return _configuration.Colors.Dark;

            default:

                return string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("SetColors", _colorVariables);
            await JSRuntime.InvokeVoidAsync("SetAccordion");
            await JSRuntime.InvokeVoidAsync("SetCarrousel");
            await JSRuntime.InvokeVoidAsync("SetGallery");
            await JSRuntime.InvokeVoidAsync("SetTabs");
            await JSRuntime.InvokeVoidAsync("SetCountdown");
            StateHasChanged();
        }
    }
}