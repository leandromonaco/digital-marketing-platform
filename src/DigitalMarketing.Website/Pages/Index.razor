@page "/{pagename?}"


@using DigitalMarketing.Website.Components
@using DigitalMarketing.Core.Database
@using DigitalMarketing.Model.Settings
@using Microsoft.AspNetCore.Http
@using  DigitalMarketing.Model
@using  DigitalMarketing.Model.Extensions
@using DigitalMarketing.Model.Helpers
@using DigitalMarketing.Core.Http
@using Microsoft.AspNetCore.Components.Web.Extensions.Head

<div class="nav-container">
    <NavigationBar></NavigationBar>
</div>


@if (_tenant != null && _configuration != null)
{
    @*<Title Value="@_configuration.Title"></Title>*@

    if (string.IsNullOrEmpty(PageName) ||
       (!string.IsNullOrEmpty(PageName) && PageName.Equals("undefined")))
    {
        PageName = "home";
    }
    var p = _configuration.Pages.Where(p => p.Name.Equals(PageName)).FirstOrDefault();

    foreach (var s in p.Sections)
    {
        switch (s.Type)
        {
            case "Alert":
                <Alert Tenant="@_tenant" Section="@s"></Alert>
                break;
            case "Cover":
                <Cover Tenant="@_tenant" Section="@s"></Cover>
                break;
            case "CallToAction":
                <CallToAction Tenant="@_tenant" Section="@s"></CallToAction>
                break;
            case "Carrousel":
                <Carrousel Tenant="@_tenant" Section="@s"></Carrousel>
                break;
            case "Gallery":
                <Gallery Tenant="@_tenant" Section="@s"></Gallery>
                break;
            case "Countdown":
                <Countdown Tenant="@_tenant" Section="@s"></Countdown>
                break;
            case "ContactForm":
                <ContactForm Tenant="@_tenant" Section="@s"></ContactForm>
                break;
            case "Tabs":
                <Tabs Tenant="@_tenant" Section="@s"></Tabs>
                break;
            case "Map":
                <Map Tenant="@_tenant" Section="@s"></Map>
                break;
            case "ContentImage":
                <ContentImage Tenant="@_tenant" Section="@s"></ContentImage>
                break;
            case "ContentVideo":
                <ContentVideo Tenant="@_tenant" Section="@s"></ContentVideo>
                break;
            case "Testimonials":
                <Testimonials Tenant="@_tenant" Section="@s"></Testimonials>
                break;
            case "PricingPlans":
                <PricingPlans Tenant="@_tenant" Section="@s"></PricingPlans>
                break;
            case "Accordion":
                <Accordion Tenant="@_tenant" Section="@s"></Accordion>
                break;
            case "Footer":
                <Footer Tenant="@_tenant" Section="@s"></Footer>
                break;
        }
    }
}

@code
{
    [Parameter]
    public string PageName { get; set; }

    //[Inject]
    //public IHttpService HttpService { get; set; }

    [Inject]
    public IHttpContextAccessor HttpContextAccessor { get; set; }

    Tenant _tenant;
    TenantConfigurationModel _configuration;

    protected async override void OnInitialized()
    {
        //var test = await HttpService.GetAsync("http://localhost:52090");
        _tenant = await SiteHelper.IdentifyTenant(HttpContextAccessor.HttpContext.Request.Host.Value);
        _configuration = _tenant.LoadConfiguration(HttpContextAccessor.HttpContext.Request.Host.Value);
    }
}