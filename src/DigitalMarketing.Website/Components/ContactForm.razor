@using SendGrid;
@using SendGrid.Helpers.Mail;
@using DigitalMarketing.Model;
@using DigitalMarketing.Core.Database
@using DigitalMarketing.Web.Model
@using DigitalMarketing.Model.Events
@using System.Text.Json
@using System.Dynamic
@inject DigitalMarketing.Model.DatabaseRepository DatabaseRepository
@inject TenantConfigurationSession SiteState

@if (SiteState.Settings != null)
{

    @if (IsIFrame)
    {
        <div class="form-email">
            <input type="text" class="validate-required" name="name" @bind="_touchPointEvent.FirstName" placeholder="Primer Nombre">
            <input type="text" class="validate-required validate-email" name="email" @bind="_touchPointEvent.Email" placeholder="Email">
            <input type="text" class="validate-required" name="phone" @bind="_touchPointEvent.Phone" placeholder="Telefono">
            <input type="text" class="validate-required" name="city" @bind="_touchPointEvent.City" placeholder="Ciudad">
            <input type="text" class="validate-required" name="source" @bind="_touchPointEvent.Source" placeholder="Como nos conocio">
            <textarea class="validate-required" name="message" rows="4" @bind="_message" placeholder="Mensaje"></textarea>
            <ReCaptcha @ref="reCaptcha" SiteKey="6Ldau70ZAAAAAP6AxAKe-4iT8Ckfunmi6AJqjF14" OnSuccess="OnSuccess" OnExpired="OnExpired" />
            <a class="btn btn-filled btn-lg mb0" @onclick="SendMessage">Enviar</a>
        </div>

        @if (_isSent)
        {
            <p>Gracias por contactarnos, nos pondremos en contacto a la brevedad.</p>
        }
    }
    else
    {
        <section class="bg-dark image-square right">
            <div class="col-md-6 p0 image">
                <div class="map-holder background-image-holder">
                    <iframe src="@SiteState.Settings.ThirdPartyServices.GoogleMaps.Url"></iframe>
                </div>
            </div>
            <div class="col-md-6 content">

                <div class="form-email">
                    <h6 class="uppercase text-center">Contacto</h6>
                    <input type="text" class="validate-required" name="name" @bind="_touchPointEvent.FirstName" placeholder="Primer Nombre">
                    <input type="text" class="validate-required validate-email" name="email" @bind="_touchPointEvent.Email" placeholder="Email">
                    <input type="text" class="validate-required" name="phone" @bind="_touchPointEvent.Phone" placeholder="Telefono">
                    <textarea class="validate-required" name="message" rows="4" @bind="_message" placeholder="Mensaje"></textarea>
                    <ReCaptcha @ref="reCaptcha" SiteKey="6Ldau70ZAAAAAP6AxAKe-4iT8Ckfunmi6AJqjF14" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                    <a class="btn btn-filled btn-lg mb0" @onclick="SendMessage">Enviar</a>
                </div>

                @if (_isSent)
                {
                    <p>Gracias por contactarnos, nos pondremos en contacto a la brevedad.</p>
                }

            </div>
        </section>
    }

}

@code {
    [Parameter]
    public bool IsIFrame { get; set; }

    DigitalMarketing.Model.Events.TouchPointEvent _touchPointEvent = new DigitalMarketing.Model.Events.TouchPointEvent() { EventType = TouchPointEventType.AskQuestion };

    protected bool _isSent;
    protected string _message;
    protected Guid _productId;


    //https://github.com/sample-by-jsakamoto/Blazor-UseGoogleReCAPTCHA
    private ReCaptcha reCaptcha;

    private bool ValidReCAPTCHA = false;

    private bool ServerVerificatiing = false;

    private void OnSuccess()
    {
        ValidReCAPTCHA = true;
    }

    private void OnExpired()
    {
        ValidReCAPTCHA = false;
    }

    protected async override void OnInitialized()
    {
        StateHasChanged();
    }

    private async Task SendMessage()
    {


        if (ValidReCAPTCHA)
        {
            var response = await reCaptcha.GetResponseAsync();
            try
            {
                ServerVerificatiing = true;
                StateHasChanged();
                var result = await DigitalMarketing.Web.Model.reCaptchaValidator.Validate(response);

                dynamic customData = new ExpandoObject();
                customData.Message = _message;
                customData.ProductId = _productId;
                _touchPointEvent.CustomData = customData;


                if (result.Success)
                {
                    var client = new SendGridClient(SiteState.Settings.ThirdPartyServices.SendGrid.Key);
                    var authorizedSenderEmail = new EmailAddress(SiteState.Settings.ThirdPartyServices.SendGrid.AuthorizedSenderEmail);
                    var subject = "Webpage Contact";


                    var plainTextContent = $@"<b>Nombre:</b> {_touchPointEvent.FirstName} <br/>
                              <b>Email:</b> {_touchPointEvent.Email} <br/>
                              <b>Telefono:</b> {_touchPointEvent.Phone} <br/>
                              <b>Ciudad:</b> {_touchPointEvent.City} <br/>
                              <b>Como nos conocio:</b> {_touchPointEvent.Source} <br/>
                              <b>Mensaje:</b> {_message} <br/>";
                    var htmlContent = plainTextContent;

                    Customer customer = new Customer();

                    customer.TenantId = SiteState.TenantId;
                    customer.Name = _touchPointEvent.FirstName;
                    customer.Email = _touchPointEvent.Email;

                    await DatabaseRepository.SaveCustomer(customer);

                    Touchpoint newEvent = new Touchpoint()
                    {
                        Id = Guid.NewGuid(),
                        CustomerId = customer.Id,
                        Description = JsonSerializer.Serialize<DigitalMarketing.Model.Events.TouchPointEvent>(_touchPointEvent)
                    };

                    var msg = MailHelper.CreateSingleEmail(authorizedSenderEmail, authorizedSenderEmail, subject, plainTextContent, htmlContent);
                    msg.ReplyTo = new EmailAddress(_touchPointEvent.Email);
                    var emailResponse = await client.SendEmailAsync(msg);

                    if (emailResponse.StatusCode.ToString().Equals("Accepted"))
                    {
                        newEvent.IsEmailDelivered = true;
                    }

                    await DatabaseRepository.SaveTouchpoint(newEvent);

                    _isSent = true;
                }
                else
                {

                    throw new Exception("Invalid reCaptcha");
                }
            }
            catch (HttpRequestException e)
            {

            }
        }
    }
}
