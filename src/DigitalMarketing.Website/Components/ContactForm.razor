@using DigitalMarketing.Model.Settings
@using DigitalMarketing.Core.Database
@using DigitalMarketing.Core.Controller
@using DigitalMarketing.Model.Events
@using  DigitalMarketing.Model.Extensions
@using Microsoft.AspNetCore.Http

@if (Tenant != null && Section != null)
{
    @if (Section.Layout.Equals("Iframe"))
    {
        <div class="form-email">
            <input type="text" class="validate-required" name="name" @bind="_touchPointEvent.FirstName" placeholder="Primer Nombre">
            <input type="text" class="validate-required validate-email" name="email" @bind="_touchPointEvent.Email" placeholder="Email">
            <input type="text" class="validate-required" name="phone" @bind="_touchPointEvent.Phone" placeholder="Telefono">
            <input type="text" class="validate-required" name="city" @bind="_touchPointEvent.City" placeholder="Ciudad">
            <input type="text" class="validate-required" name="source" @bind="_touchPointEvent.Source" placeholder="Como nos conocio">
            <textarea class="validate-required" name="message" rows="4" @bind="_touchPointEvent.Message" placeholder="Mensaje"></textarea>
            <ReCaptcha @ref="reCaptcha" SiteKey="6Ldau70ZAAAAAP6AxAKe-4iT8Ckfunmi6AJqjF14" OnSuccess="OnSuccess" OnExpired="OnExpired" />
            <a class="btn" @onclick="SendMessage">Enviar</a>
        </div>

        @if (_isSent)
        {
            <p>Gracias por contactarnos, nos pondremos en contacto a la brevedad.</p>
        }
    }
    else if (Section.Layout.Equals("Map"))
    {
        <section class="@Section.Theme image-square right">
            <div class="col-md-6 p0 image">
                <div class="map-holder background-image-holder">
                    <iframe src="@Section.Url"></iframe>
                </div>
            </div>
            <div class="col-md-6 content">
                <div class="form-email">
                    <h3 class="text-center">Contacto</h3>
                    <input type="text" class="validate-required" name="name" @bind="_touchPointEvent.FirstName" placeholder="Primer Nombre">
                    <input type="text" class="validate-required validate-email" name="email" @bind="_touchPointEvent.Email" placeholder="Email">
                    <input type="text" class="validate-required" name="phone" @bind="_touchPointEvent.Phone" placeholder="Telefono">
                    <input type="text" class="validate-required" name="city" @bind="_touchPointEvent.City" placeholder="Ciudad">
                    <input type="text" class="validate-required" name="source" @bind="_touchPointEvent.Source" placeholder="Como nos conocio">
                    <textarea class="validate-required" name="message" rows="4" @bind="_touchPointEvent.Message" placeholder="Mensaje"></textarea>
                    <ReCaptcha @ref="reCaptcha" SiteKey="6Ldau70ZAAAAAP6AxAKe-4iT8Ckfunmi6AJqjF14" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                    <a class="btn" @onclick="SendMessage">Enviar</a>
                </div>

                @if (_isSent)
                {
                    <p>Gracias por contactarnos, nos pondremos en contacto a la brevedad.</p>
                }

            </div>
        </section>
    }

}

@code {
    [Parameter]
    public Tenant Tenant { get; set; }

    [Parameter]
    public Section Section { get; set; }

    [Inject]
    public IHttpContextAccessor HttpContextAccessor { get; set; }

    TouchPointEvent _touchPointEvent;

    protected bool _isSent;
    protected Guid _productId;

    //https://github.com/sample-by-jsakamoto/Blazor-UseGoogleReCAPTCHA
    private ReCaptcha reCaptcha;

    private bool ValidReCAPTCHA = false;

    private bool ServerVerificatiing = false;

    private void OnSuccess()
    {
        ValidReCAPTCHA = true;
    }

    private void OnExpired()
    {
        ValidReCAPTCHA = false;
    }

    protected async override void OnInitialized()
    {
        _touchPointEvent = new TouchPointEvent() { EventType = TouchPointEventType.AskQuestion };
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (ValidReCAPTCHA)
        {
            var response = await reCaptcha.GetResponseAsync();
            try
            {
                ServerVerificatiing = true;
                StateHasChanged();
                var result = await DigitalMarketing.Web.Model.reCaptchaValidator.Validate(response);

                if (result.Success)
                {
                    var configuration = Tenant.LoadConfiguration(HttpContextAccessor.HttpContext.Request.Host.Value);
                    await ApiController.SendMessage(Tenant.Id, configuration.ThirdPartyConfiguration.SendGrid, _touchPointEvent);
                    _isSent = true;
                }
                else
                {

                    throw new Exception("Invalid reCaptcha");
                }
            }
            catch (HttpRequestException e)
            {

            }
        }
    }
}
