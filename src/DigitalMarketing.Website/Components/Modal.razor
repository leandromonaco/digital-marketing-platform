@using SendGrid;
@using SendGrid.Helpers.Mail;
@using DigitalMarketing.Model;
@using DigitalMarketing.Model.Settings
@using DigitalMarketing.Core.Database
@using DigitalMarketing.Core.Controller
@using DigitalMarketing.Model.Events
@using System.Text.Json
@using  DigitalMarketing.Model.Extensions
@using Microsoft.AspNetCore.Http
@inject IJSRuntime JSRuntime

@if (Tenant != null && Section != null)
{
    <div class="bg-light foundry_modal text-center" @ref="_element" modal-link="2" method="dialog">
        @if (!_isSuccessful)
        {
            <i class="ti-close close-modal" @onclick="CloseModal"></i>
            <div class="col-md-10 col-md-offset-1 col-sm-12 text-center">
                <input type="text" name="name" class="validate-required signup-name-field" placeholder="Primer Nombre" @bind="_touchPointEvent.FirstName">
                <input type="text" name="email" class="validate-required validate-email signup-email-field" placeholder="Email" @bind="_touchPointEvent.Email">
                <a class="btn btn-lg" @onclick="ButtonClicked">@Section.ButtonText</a>
            </div>
        }
        else
        {
            <div class="row">
            <div class="col-sm-10 col-sm-offset-1">
                <div class="feature text-center">
                    <h3 class="large">Gracias por descargar el brochure!</h3>
                    <p class="mb40 mb-xs-24">
                        En poco tiempo recibiras un email con el link de descarga.
                        <a href="#" @onclick="CloseModal">Cerrar</a>
                    </p>
                    <ul class="list-inline social-list">
                        @if (!string.IsNullOrEmpty(_tenantData.Website.Channels.Twitter))
                        {
                            <li>
                                <a href="@_tenantData.Website.Channels.Twitter" target="_blank">
                                    <i class="icon icon-sm ti-twitter-alt"></i>
                                </a>
                            </li>
                        }
                        @if (!string.IsNullOrEmpty(_tenantData.Website.Channels.Facebook))
                        {
                            <li>
                                <a href="@_tenantData.Website.Channels.Facebook" target="_blank">
                                    <i class="icon icon-sm ti-facebook"></i>
                                </a>
                            </li>
                        }
                        @if (!string.IsNullOrEmpty(_tenantData.Website.Channels.Instagram))
                        {
                            <li>
                                <a href="@_tenantData.Website.Channels.Instagram" target="_blank">
                                    <i class="icon icon-sm ti-instagram"></i>
                                </a>
                            </li>
                        }
                        @if (!string.IsNullOrEmpty(_tenantData.Website.Channels.YouTube))
                        {
                            <li>
                                <a href="@_tenantData.Website.Channels.YouTube" target="_blank">
                                    <i class="icon icon-sm ti-youtube"></i>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        }
    </div>
}


@code {
    private bool _isSuccessful;
    private TenantData _tenantData;
    private DotNetObjectReference<Modal> _this;
    private ElementReference _element;

    TouchPointEvent _touchPointEvent = new TouchPointEvent();

    [Parameter]
    public Tenant Tenant { get; set; }

    [Parameter]
    public Section Section { get; set; }

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Inject]
    public IHttpContextAccessor HttpContextAccessor { get; set; }

    // although the title is set on loading, if it is changed by a component we
    // need to call StateHasChanged to trigger Blazor to rerender since the event
    // that triggered it is outside this component
    protected async override void OnInitialized()
    {
        _tenantData = Tenant.LoadConfiguration(HttpContextAccessor.HttpContext.Request.Host.Value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Open)
        {
            await JSRuntime.InvokeVoidAsync("blazorOpenModal", _element);
        }
    }

    public async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("blazorCloseModal", _element);
        if (Open == true)
        {
            Open = false;
            _isSuccessful = false;
            StateHasChanged();
            await OpenChanged.InvokeAsync(Open);
        }
    }

    async Task ButtonClicked()
    {
        switch (Section.Workflow)
        {
            case "FileDownload":
                await ApiController.DownloadFile(Tenant.Id, _tenantData.Services.SendGrid, _touchPointEvent, _tenantData.Workflows.FileDownload.File);
                _isSuccessful = true;
                StateHasChanged();
                break;
            default:
                throw new Exception("Invalid Workflow");
                break;
        }
    }
}