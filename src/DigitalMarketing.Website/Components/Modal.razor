@using SendGrid;
@using SendGrid.Helpers.Mail;
@using DigitalMarketing.Model;
@using DigitalMarketing.Model.Settings
@using DigitalMarketing.Core.Database
@using DigitalMarketing.Model.Events
@using System.Text.Json
@inject DigitalMarketing.Model.DatabaseRepository DatabaseRepository
@inject IJSRuntime JSRuntime


<style>
.btn {
    background: @_backgroundColor;
    color: @_color;
}

.btn:hover {
    background: @_hoverBackgroundColor;
    color: @_hoverColor;
}
</style>

@if (Section != null)
{
    <dialog @ref="_element">
        <div class="foundry_modal text-center reveal-modal" modal-link="2" method="dialog">
            <i class="ti-close close-modal" @onclick="CancelModal"></i>
            <div class="col-md-10 col-md-offset-1 col-sm-12 text-center">
                <input type="text" name="name" class="validate-required signup-name-field" placeholder="First Name" @bind="_touchPointEvent.FirstName">
                <input type="text" name="email" class="validate-required validate-email signup-email-field" placeholder="Email" @bind="_touchPointEvent.Email">
                <a class="btn btn-lg" @onclick="ButtonClicked">@Section.ButtonText</a>
            </div>
        </div>
    </dialog>
}


@code {
    private DotNetObjectReference<Modal> _this;
    private ElementReference _element;

    TouchPointEvent _touchPointEvent = new TouchPointEvent();

    [Parameter]
    public Tenant Tenant { get; set; }

    [Parameter]
    public Section Section { get; set; }

    [Parameter]
    public TenantConfigurationModel Configuration { get; set; }

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    string _color;
    string _backgroundColor;
    string _hoverColor;
    string _hoverBackgroundColor;

    // although the title is set on loading, if it is changed by a component we
    // need to call StateHasChanged to trigger Blazor to rerender since the event
    // that triggered it is outside this component
    protected async override void OnInitialized()
    {
        _color = "#000000";
        _backgroundColor = "#808080";
        _hoverColor = "#808080";
        _hoverBackgroundColor = "#000000";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Open)
        {
            await JSRuntime.InvokeVoidAsync("blazorOpenModal", _element);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("blazorCloseModal", _element);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task OnClose()
    {
        if (Open == true)
        {
            Open = false;
            await OpenChanged.InvokeAsync(Open);
        }
    }

    async Task CancelModal()
    {
        await OnClose();

    }

    async Task ButtonClicked()
    {
        //TODO: Execute Call-To-Action
        _touchPointEvent.EventType = TouchPointEventType.DownloadFile;

        Customer customer = new Customer();

        customer.TenantId = Tenant.Id;
        customer.Name = _touchPointEvent.FirstName;
        customer.Email = _touchPointEvent.Email;

        await DatabaseRepository.SaveCustomer(customer);

        Touchpoint newEvent = new Touchpoint()
        {
            Id = Guid.NewGuid(),
            CustomerId = customer.Id,
            Description = JsonSerializer.Serialize<DigitalMarketing.Model.Events.TouchPointEvent>(_touchPointEvent)
        };

        var client = new SendGridClient(Configuration.ThirdPartyServices.SendGrid.Key);
        var fromEmail = new EmailAddress(Configuration.ThirdPartyServices.SendGrid.AuthorizedSenderEmail);
        var toEmail = new EmailAddress(_touchPointEvent.Email);

        string html = System.IO.File.ReadAllText(@"D:\Build\GitHub\DigitalMarketingPlatform\docs\emails\DownloadFile.html");
        html = html.Replace("{FirstName}", _touchPointEvent.FirstName)
                   .Replace("{DownloadUrl}", Section.Workflow.Parameters);

        var msg = MailHelper.CreateSingleEmail(fromEmail, toEmail, "this is your brochure", string.Empty, html);
        msg.ReplyTo = new EmailAddress(_touchPointEvent.Email);
        var emailResponse = await client.SendEmailAsync(msg);

        if (emailResponse.StatusCode.ToString().Equals("Accepted"))
        {
            newEvent.IsEmailDelivered = true;
        }

        await DatabaseRepository.SaveTouchpoint(newEvent);

        await OnClose();
    }
}